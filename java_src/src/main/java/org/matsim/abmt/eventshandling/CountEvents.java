package ch.ethz.matsim.abmt.eventshandling;

import org.matsim.api.core.v01.events.PersonEntersVehicleEvent;
import org.matsim.api.core.v01.events.PersonLeavesVehicleEvent;
import org.matsim.api.core.v01.events.handler.PersonEntersVehicleEventHandler;
import org.matsim.api.core.v01.events.handler.PersonLeavesVehicleEventHandler;
import org.matsim.core.api.experimental.events.EventsManager;
import org.matsim.core.events.EventsUtils;
import org.matsim.core.events.MatsimEventsReader;
import org.matsim.core.utils.misc.Time;

/**
 * Demonstration of a simple class that reads an events file, keeps track of the number of agents who are in a vehicle
 * during the simulation, prints the final value and exits
 */
public class CountEvents {
    public static void main(String... args) {
        // The EventsManager is an object responsible for notifying listeners when an event is triggered
        EventsManager events = EventsUtils.createEventsManager();

        // create an instance of our event handler (defined below), and register it to the events manager in order
        // to get notified of events
        CountingHandler countingHandler = new CountingHandler();
        events.addHandler(countingHandler);

        // read the events file located at "path/to/output/output_events.xml.gz",
        // giving them to the events manager, which itself will forward them to the relevant event handlers
        new MatsimEventsReader(events).readFile("path/to/output/output_events.xml.gz");

        // print the stored value to screen
        System.out.println(countingHandler.counter);
    }
}

/**
 * To keep track of the number of agents currently in a vehicle, we need to keep track of two types of events:
 * entering and leaving the vehicle.
 *
 * To get notified of one particular type of events occuring, one needs to implement a XXXEventHandler interface.
 *
 * Trick: in IntelliJ, typing "EventHandler" after "implements" and waiting an instant will display a drop-down list
 * of all interfaces that contain "EventHandler" in their name. All such classes that are located in org.matsim are
 * interfaces one can implement to listen to events. Names are mostly self-explaining.
 */
class CountingHandler implements PersonEntersVehicleEventHandler, PersonLeavesVehicleEventHandler {
    // variables declared outside of a method are fields, associated to a particular instance of a class.
    // we create two fields:
    // - counter, that will track the number of persons inside of a vehicle, and
    // - lastPrint, the time (in seconds) at which we last printed information to screen. We will use this to print
    //   a few messages to screen to monitor the evolution of the value of counter.
    int counter = 0;
    double lastPrint = 0;

    // This method is defined by the PersonEntersVehicleEventHandler, and can be automatically generated by your IDE
    // when declaring the implemented interfaces above.
    // It will be called by the EventsManager every time the simulation (or events file) triggers an enter vehicle event.
    // You can fill it with whatever code you like, which will mostly be updating internal data structures.
    @Override
    public void handleEvent(PersonEntersVehicleEvent personEntersVehicleEvent) {
        // every time a person enters a vehicle, we increase the number of persons in a vehicle by one.
        counter += 1;

        // If the last time we printed some information to screen was more than 1 hour ago, print the state of counter.
        if (personEntersVehicleEvent.getTime() > lastPrint + 3600) {
            lastPrint = personEntersVehicleEvent.getTime();
            System.out.println("time: "+ Time.writeTime(personEntersVehicleEvent.getTime())+": "+counter);
        }
    }

    // This method is defined by the PersonLeavesVehicleEventHandler.
    // Notice how it as the same name as the one for person enter vehicles event, but differs in terms of the type of the
    // parameter. In Java, contrary to Python, variables have a fixed type (this is called static typing), which allows
    // to decide on what method to call depending of the type of the variable (if you want to show off, this is called
    // "polymorphic dispatch").
    @Override
    public void handleEvent(PersonLeavesVehicleEvent personLeavesVehicleEvent) {
        // every time a person leaves a vehicle, we decrease the number of persons in a vehicle by one.
        counter -= 1;
    }
}